{
    "url": "https://en.wikipedia.org/wiki/Q_(number_format)",
    "title": "Q (number format)",
    "summary": "The Q notation is a succinct way to specify the parameters of a binary fixed point number format.  A number of other notations have been used for the same purpose.",
    "content": "The Q notation is a succinct way to specify the parameters of a binary fixed point number format.  A number of other notations have been used for the same purpose.\n\n\n== Definition ==\n\n\n=== Texas Instruments version ===\nThe Q notation, as defined by Texas Instruments, consists of the letter Q followed by a pair of numbers m.n, where m is the number of bits used for the integer part of the value, and n is the number of fraction bits. \nBy default, the notation describes signed binary fixed point format, with the unscaled integer being stored  in two's complement format, used in most binary processors. The first bit always gives the sign of the value(1 = negative, 0 = non-negative), and it is not counted in the m parameter.  Thus the total  number w of bits used is 1 + m + n.\nFor example, the specification Q3.12 describes a signed binary fixed-point number with a w = 16 bits in total, comprising the sign bit, three bits for the integer part, and 12 bits that are assumed to be fraction. That is, a 16-bit signed (two's complement) integer, that is implicitly multiplied by the scaling factor 2−12In particular, when n is zero, the numbers are just integers. If m is zero, all bits except the sign bit are fraction bits; then the range of the stored number is from −1.0 (inclusive) to +1 (exclusive).  Both m and n may be negative\nThe m and the dot may be omitted, in which case they are inferred from the size of the variable or register where the value is stored. Thus Q12 means a signed integer with any number of bits, that is implicitly multiplied by 2−12.\nThe letter U can be prefixed to the Q to denote an unsigned binary fixed-point format.  For example, UQ1.15 describes values represented as unsigned 16-bit integers with implicit scaling factor of 2−15, which range from 0.0 to (216−1)/215 = +1.999969482421875.\n\n\n=== AMD version ===\nA variant of the Q notation has been in use by AMD.  In this variant, the m number includes the sign bit. For example, a 16-bit signed integer would be denoted Q15.0 in the TI variant, but  Q16.0 in the AMD variant.\n\n\n== Characteristics ==\nThe resolution (difference between successive values) of a Qm.n or UQm.n format is always 2−n.  The range of representable values depends on the notation used:\n\nFor example, a Q15.1 format number requires 15+1 = 16 bits, has resolution 2−1 = 0.5, and the representable values range from −214 = −16384.0 to +214  − 2−1 = +16383.5. In hexadecimal, the negative values range from 0x8000 to 0xFFFF followed by the non-negative ones from 0x0000 to 0x7FFF.\n\n\n== Math operations ==\nQ numbers are a ratio of two integers: the numerator is kept in storage, the denominator \n  \n    \n      \n        d\n      \n    \n    {\\displaystyle d}\n   is equal to 2n.\nConsider the following example:\n\nThe Q8 denominator equals 28 = 256\n1.5 equals 384/256\n384 is stored, 256 is inferred because it is a Q8 number.If the Q number's base is to be maintained (n remains constant) the Q number math operations must keep the denominator \n  \n    \n      \n        d\n      \n    \n    {\\displaystyle d}\n   constant. The following formulas show math operations on the general Q numbers \n  \n    \n      \n        \n          N\n          \n            1\n          \n        \n      \n    \n    {\\displaystyle N_{1}}\n   and \n  \n    \n      \n        \n          N\n          \n            2\n          \n        \n      \n    \n    {\\displaystyle N_{2}}\n  . (If we consider the example as mentioned above, \n  \n    \n      \n        \n          N\n          \n            1\n          \n        \n      \n    \n    {\\displaystyle N_{1}}\n   is 384 and \n  \n    \n      \n        d\n      \n    \n    {\\displaystyle d}\n   is 256.)\n\n  \n    \n      \n        \n          \n            \n              \n                \n                  \n                    \n                      N\n                      \n                        1\n                      \n                    \n                    d\n                  \n                \n                +\n                \n                  \n                    \n                      N\n                      \n                        2\n                      \n                    \n                    d\n                  \n                \n              \n              \n                \n                =\n                \n                  \n                    \n                      \n                        N\n                        \n                          1\n                        \n                      \n                      +\n                      \n                        N\n                        \n                          2\n                        \n                      \n                    \n                    d\n                  \n                \n              \n            \n            \n              \n                \n                  \n                    \n                      N\n                      \n                        1\n                      \n                    \n                    d\n                  \n                \n                −\n                \n                  \n                    \n                      N\n                      \n                        2\n                      \n                    \n                    d\n                  \n                \n              \n              \n                \n                =\n                \n                  \n                    \n                      \n                        N\n                        \n                          1\n                        \n                      \n                      −\n                      \n                        N\n                        \n                          2\n                        \n                      \n                    \n                    d\n                  \n                \n              \n            \n            \n              \n                \n                  (\n                  \n                    \n                      \n                        \n                          N\n                          \n                            1\n                          \n                        \n                        d\n                      \n                    \n                    ×\n                    \n                      \n                        \n                          N\n                          \n                            2\n                          \n                        \n                        d\n                      \n                    \n                  \n                  )\n                \n                ×\n                d\n              \n              \n                \n                =\n                \n                  \n                    \n                      \n                        N\n                        \n                          1\n                        \n                      \n                      ×\n                      \n                        N\n                        \n                          2\n                        \n                      \n                    \n                    d\n                  \n                \n              \n            \n            \n              \n                \n                  (\n                  \n                    \n                      \n                        \n                          N\n                          \n                            1\n                          \n                        \n                        d\n                      \n                    \n                    \n                      /\n                    \n                    \n                      \n                        \n                          N\n                          \n                            2\n                          \n                        \n                        d\n                      \n                    \n                  \n                  )\n                \n                \n                  /\n                \n                d\n              \n              \n                \n                =\n                \n                  \n                    \n                      \n                        N\n                        \n                          1\n                        \n                      \n                      \n                        /\n                      \n                      \n                        N\n                        \n                          2\n                        \n                      \n                    \n                    d\n                  \n                \n              \n            \n          \n        \n      \n    \n    {\\displaystyle {\\begin{aligned}{\\frac {N_{1}}{d}}+{\\frac {N_{2}}{d}}&={\\frac {N_{1}+N_{2}}{d}}\\\\{\\frac {N_{1}}{d}}-{\\frac {N_{2}}{d}}&={\\frac {N_{1}-N_{2}}{d}}\\\\\\left({\\frac {N_{1}}{d}}\\times {\\frac {N_{2}}{d}}\\right)\\times d&={\\frac {N_{1}\\times N_{2}}{d}}\\\\\\left({\\frac {N_{1}}{d}}/{\\frac {N_{2}}{d}}\\right)/d&={\\frac {N_{1}/N_{2}}{d}}\\end{aligned}}}\n  \nBecause the denominator is a power of two, the multiplication can be implemented as an arithmetic shift to the left and the division as an arithmetic shift to the right; on many processors shifts are faster than multiplication and division.\nTo maintain accuracy, the intermediate multiplication and division results must be double precision and care must be taken in rounding the intermediate result before converting back to the desired Q number.\nUsing C the operations are (note that here, Q refers to the fractional part's number of bits) :\n\n\n=== Addition ===\n\nWith saturation\n\nUnlike floating point ±Inf, saturated results are not sticky and will unsaturate on adding a negative value to a positive saturated value (0x7FFF) and vice versa in that implementation shown. In assembly language, the Signed Overflow flag can be used to avoid the typecasts needed for that C implementation.\n\n\n=== Subtraction ===\n\n\n=== Multiplication ===\n\n\n=== Division ===\n\n\n== See also ==\nFixed-point arithmetic\nFloating-point arithmetic\n\n\n== References ==\n\n\n== Further reading ==\nOberstar, Erick L. (2007-08-30) [2004]. \"Fixed Point Representation & Fractional Math\" (PDF). 1.2. Oberstar Consulting. Archived (PDF) from the original on 2017-11-04. Retrieved 2017-11-04. (Note: the accuracy of the article is in dispute; see discussion.)\n\n\n== External links ==\n\"Q-Number-Format Java Implementation\". Archived from the original on 2017-11-04. Retrieved 2017-11-04.\n\"Q-format Converter\". Archived from the original on 2021-06-25. Retrieved 2021-06-25.",
    "links": [
        "AMD",
        "ARM Limited",
        "Arithmetic shift",
        "C (programming language)",
        "Fixed-point arithmetic",
        "Floating-point arithmetic",
        "Rounding",
        "Two's complement"
    ]
}