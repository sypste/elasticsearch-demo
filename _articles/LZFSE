{
    "url": "https://en.wikipedia.org/wiki/LZFSE",
    "title": "LZFSE",
    "summary": "LZFSE (Lempel–Ziv Finite State Entropy) is an open source lossless data compression algorithm created by Apple Inc.  It was released with a simpler algorithm called LZVN.",
    "content": "LZFSE (Lempel–Ziv Finite State Entropy) is an open source lossless data compression algorithm created by Apple Inc.  It was released with a simpler algorithm called LZVN.\n\n\n== Overview ==\nThe name is an acronym for Lempel-Ziv and Finite State Entropy (implementation of asymmetric numeral systems).\nLZFSE was introduced by Apple at its Worldwide Developer Conference 2015. It shipped with that year's iOS 9 and OS X 10.11 releases.\nApple claims that LZFSE compresses with a ratio comparable to that of zlib (DEFLATE) and decompresses two to three times faster while using fewer resources, therefore offering higher energy efficiency than zlib. It was aimed for scenarios where decompression speed and rate should be prioritised equally. Part of this energy efficiency was achieved by optimising the algorithm for modern micro-architectures, specifically focusing on arm64. Third-party benchmarking confirms that LZFSE decompresses faster than zlib, but also suggests that many other modern compression algorithms may have more favorable compression algorithm performance characteristics such as density, compression speed and decompression speed by a significant margin.According to the Squash Benchmark, LZFSE is similar in speed to ZSTD (level 6), but has a slightly worse ratio. LZVN is similar in speed to LZ4 level 4, with a slightly worse ratio as well. Neither LZFSE nor LZVN is tunable at runtime, although a few constants can be tweaked at compile time for the usual speed-ratio trade-off.\n\n\n== Implementation ==\nA reference C library written by Eric Bainville was made available under the 3-clause BSD License after WWDC 2016. It includes an executable to compress and decompress LZFSE streams as well. There are no plans to expose an LZVN API.Apple's LZFSE implementation uses a simpler algorithm called LZVN when the input is smaller than LZFSE_ENCODE_LZVN_THRESHOLD (4096 bytes). This is a LZSS-type algorithm without entropy encoding but with three widths of REP (L,M,D) packets. In the open source reference implementation, Apple explains that LZFSE does not perform as well for small sizes, so LZVN is used instead. This algorithm in libfastCompression.a was discovered earlier as the default kernelcache compression method in Mac OS X Yosemite Developer Preview 1 (2014), replacing the legacy lzss compression from Haruhiko Okumura.\n\n\n== Usage ==\nAppleFSCompression.framework (AFSC), the mechanism for quasi-transparent compression in HFS Plus and Apple File System, supports LZFSE and LZVN since OS X 10.9.\nApple's Disk Images framework has offered an LZFSE-based encoding called ULFO since Mac OS X 10.11, accessible via hdiutil(1) and some third-party image utilities.\n\n\n== See also ==\nZstandard – another combination of LZ77 and FSE, by Yann Collet, the FSE author\nLZ4 compression algorithm – a fast member of the LZ77 family, also available on Apple platforms\n\n\n== References ==\n\n\n== External links ==\nlzfse on GitHub\nFinite State Entropy by Yann Collet (Cyan4973), the source of the FSE implementation in LZFSE\nDiscussion on Encode.su, from which the maintainer Eric Bainville has taken suggestions",
    "links": [
        "842 (compression algorithm)",
        "A-law algorithm",
        "ARM64",
        "Adaptive Huffman coding",
        "Adaptive differential pulse-code modulation",
        "Algebraic code-excited linear prediction",
        "Algorithm",
        "Apple Disk Image",
        "Apple File System",
        "Apple Inc.",
        "Arithmetic coding",
        "Asymmetric numeral systems",
        "Audio codec",
        "Average bitrate",
        "BSD License",
        "BSD Licenses",
        "Bit rate",
        "Brotli",
        "Burrows–Wheeler transform",
        "Byte pair encoding",
        "C (programming language)",
        "Canonical Huffman code",
        "Chain code",
        "Chroma subsampling",
        "Code-excited linear prediction",
        "Coding tree unit",
        "Color space",
        "Companding",
        "Compression artifact",
        "Constant bitrate",
        "Context tree weighting",
        "Convolution",
        "DEFLATE",
        "Data compression",
        "Daubechies wavelet",
        "Deblocking filter",
        "Deflate",
        "Delta encoding",
        "Delta modulation",
        "Dictionary coder",
        "Differential pulse-code modulation",
        "Discrete cosine transform",
        "Discrete sine transform",
        "Discrete wavelet transform",
        "Display resolution",
        "Dynamic Markov compression",
        "Dynamic range",
        "Elias gamma coding",
        "Embedded Zerotrees of Wavelet transforms",
        "Entropy (information theory)",
        "Entropy coding",
        "Exponential-Golomb coding",
        "Fast Fourier transform",
        "Fibonacci coding",
        "Film frame",
        "Finite State Entropy",
        "Fourier transform",
        "Fractal compression",
        "Frame rate",
        "GitHub",
        "Golomb coding",
        "Grammar-based code",
        "HFS Plus",
        "Haruhiko Okumura",
        "Huffman coding",
        "IOS",
        "IOS 9",
        "Image compression",
        "Image resolution",
        "Information theory",
        "Interlaced video",
        "Karhunen–Loève theorem",
        "Kolmogorov complexity",
        "LZ4 (compression algorithm)",
        "LZ77 and LZ78",
        "LZJB",
        "LZRW",
        "LZWL",
        "LZX",
        "Lapped transform",
        "Latency (audio)",
        "Lempel–Ziv–Markov chain algorithm",
        "Lempel–Ziv–Oberhumer",
        "Lempel–Ziv–Stac",
        "Lempel–Ziv–Storer–Szymanski",
        "Lempel–Ziv–Welch",
        "Levenshtein coding",
        "Library (computing)",
        "Line spectral pairs",
        "Linear predictive coding",
        "Linux",
        "Log area ratio",
        "Lossless compression",
        "Lossless data compression",
        "Lossy compression",
        "MacOS",
        "Macroblock",
        "Modified Huffman coding",
        "Modified discrete cosine transform",
        "Motion compensation",
        "Motion estimation",
        "Motion vector",
        "Move-to-front transform",
        "Nyquist–Shannon sampling theorem",
        "OS X 10.11",
        "OS X El Capitan",
        "Open-source software",
        "Operating system",
        "PAQ",
        "Peak signal-to-noise ratio",
        "Pixel",
        "Prediction by partial matching",
        "Programmer",
        "Psychoacoustics",
        "Pyramid (image processing)",
        "Quantization (image processing)",
        "Quantization (signal processing)",
        "Range coding",
        "Rate–distortion theory",
        "Redundancy (information theory)",
        "Repository (version control)",
        "Run-length encoding",
        "Sampling (signal processing)",
        "Set partitioning in hierarchical trees",
        "Shannon coding",
        "Shannon–Fano coding",
        "Shannon–Fano–Elias coding",
        "Snappy (compression)",
        "Software categories",
        "Software license",
        "Software release life cycle",
        "Sound quality",
        "Speech coding",
        "Standard test image",
        "Sub-band coding",
        "Timeline of information theory",
        "Transform coding",
        "Tunstall coding",
        "Unary coding",
        "Universal code (data compression)",
        "Variable bitrate",
        "Video",
        "Video codec",
        "Video compression picture types",
        "Video quality",
        "WWDC",
        "Warped linear predictive coding",
        "Wavelet transform",
        "Zlib",
        "Zstandard",
        "Μ-law algorithm"
    ]
}